<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.github.jjYBdx4IL.maven.examples</groupId>
        <artifactId>gwt-example-aggregator</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>gwt-example-server</artifactId>
    <packaging>war</packaging>

    <name>Maven Examples :: GWT Example :: Server</name>

    <build>
        <!-- put compiled classes where jetty:run's auto-reload is looking 
            for changes -->
        <outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>
        <plugins>
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <configuration>
                    <!-- we cannot use provided scope for additional server 
                        classes because if the webapp needs it too, it may get declared twice, once 
                        explicitly with provided scope, and once through the plugin's dependencies, 
                        which leads to class loading errors like "class not found" -->
                    <useProvidedScope>false</useProvidedScope>
                    <scanIntervalSeconds>1</scanIntervalSeconds>
                    <webApp>
                        <overrideDescriptor>${project.basedir}/src/main/webapp/WEB-INF/web.devel.xml</overrideDescriptor>
                    </webApp>
                    <jettyEnvXml>${project.basedir}/src/main/webapp/WEB-INF/jetty-env.xml</jettyEnvXml>
                    <jettyXml>${project.basedir}/src/main/webapp/WEB-INF/jetty.devel.xml</jettyXml>
                    <systemProperties>
                        <systemProperty>
                            <name>gwt.codeserver.port</name>
                            <value>9876</value>
                        </systemProperty>
                        <systemProperty>
                            <!-- h2 frontend: -->
                            <name>h2.bindAddress</name>
                            <value>localhost</value>
                        </systemProperty>
                    </systemProperties>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.github.jjYBdx4IL.aop</groupId>
                        <artifactId>aspectj-tx-manager</artifactId>
                        <version>${aspectj.utils.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.glassfish.jersey.core</groupId>
                        <artifactId>jersey-server</artifactId>
                        <version>${jersey.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.glassfish.jersey.containers</groupId>
                        <artifactId>jersey-container-servlet-core</artifactId>
                        <version>${jersey.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.glassfish.jersey.inject</groupId>
                        <artifactId>jersey-hk2</artifactId>
                        <version>${jersey.version}</version>
                    </dependency>                    
                    
                    <!-- https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j -->
                    <dependency>
                      <groupId>javax.xml.bind</groupId>
                      <artifactId>jaxb-api</artifactId>
                      <version>2.3.1</version>
                    </dependency>
                    <dependency>
                      <groupId>org.glassfish.jaxb</groupId>
                      <artifactId>jaxb-runtime</artifactId>
                      <version>2.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>javax.annotation</groupId>
                        <artifactId>javax.annotation-api</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <packagingExcludes>**/*.cache.ttf,**/hosted.html,WEB-INF/web.devel.xml,WEB-INF/jetty-env.xml,WEB-INF/jetty.devel.xml</packagingExcludes>
                    <!-- do NOT archive classes, or jetty:run's auto-reload 
                        does not work -->
                    <archiveClasses>false</archiveClasses>
                    <attachClasses>true</attachClasses>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-a-test-jar</id>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <excludes>
                        <exclude>**/jetty.xml</exclude>
                        <exclude>**/log4j.xml</exclude>
                        <exclude>**/application-context.xml</exclude>
                        <exclude>**/application-properties.xml</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.github.jjYBdx4IL.aop</groupId>
                <artifactId>aspectj-ltw-maven-plugin</artifactId>
                <version>${aspectj.utils.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate-ltw-config</goal>
                            <goal>generate-maven-startup-config</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <aspectjWeaverVersion>${aspectj.version}</aspectjWeaverVersion>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>io.github.lukehutch</groupId>
                        <artifactId>fast-classpath-scanner</artifactId>
                        <version>2.21</version>
                    </dependency>
                    <!-- https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j -->
                    <dependency>
                      <groupId>javax.xml.bind</groupId>
                      <artifactId>jaxb-api</artifactId>
                      <version>2.3.1</version>
                    </dependency>
                    <dependency>
                      <groupId>org.glassfish.jaxb</groupId>
                      <artifactId>jaxb-runtime</artifactId>
                      <version>2.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>javax.annotation</groupId>
                        <artifactId>javax.annotation-api</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse 
                    m2e settings only. It has no influence on the Maven build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            com.github.jjYBdx4IL.aop
                                        </groupId>
                                        <artifactId>
                                            aspectj-ltw-maven-plugin
                                        </artifactId>
                                        <versionRange>
                                            [1.0-SNAPSHOT,)
                                        </versionRange>
                                        <goals>
                                            <goal>
                                                generate-ltw-config
                                            </goal>
                                            <goal>
                                                generate-maven-startup-config
                                            </goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencies>
        <!-- proxy servlet is considered server class and therefore hidden 
            from webapp. for that reason we have to explicitly include it for using it 
            inside the webapp -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-proxy</artifactId>
            <version>${jetty.version}</version>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>gwt-example-api</artifactId>
            <version>${project.version}</version>
        </dependency>

<!--         <dependency> -->
<!--             <groupId>org.glassfish.jersey.core</groupId> -->
<!--             <artifactId>jersey-server</artifactId> -->
<!--             <version>${jersey.version}</version> -->
<!--             <scope>provided</scope> -->
<!--         </dependency> -->
<!--         <dependency> -->
<!--             <groupId>org.glassfish.jersey.containers</groupId> -->
<!--             <artifactId>jersey-container-jetty-http</artifactId> -->
<!--             <version>${jersey.version}</version> -->
<!--             <scope>provided</scope> -->
<!--         </dependency> -->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- To run websockets in embedded server -->
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-server</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- To run websockets client -->
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jjYBdx4IL.aop</groupId>
            <artifactId>aspectj-tx-manager-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jjYBdx4IL.aop</groupId>
            <artifactId>aspectj-ltw-configurator-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
        </dependency>
    </dependencies>

</project>
