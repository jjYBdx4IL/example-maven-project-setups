Want to run embedded jetty server with auto-reload for development. That embedded jetty server should be as close
to the final deployed server as possible, ie. including websockets but without SSL (cert).

Maybe remove webapp stuff entirely.

Work around the issue that GWT dev mode with noserver enabled does not generate .gwt.rpc files needed for GWT-RPC
client-server communication by adding a reverse-proxy servlet for the path '/sandbox' that fetches the generated GWT
stuff from the GWT development server instance. Basically, we want to run GWT noserver mode without telling GWT
about it. I think this is the best, most efficient and most flexible way of working with GWT. 

UPDATE

The idea of using a reverse proxy servlet works for the client. The server, however, needs the .gwt.rpc
files, too. It tries to load them via the WebAppContext's resource loader. So instead of using a reverse
proxy that is only working for the client, we are now using jetty-maven-plugin's ability to overlay webapp
directories and simply add the client's webapp output directory.

As of now, to start up development servers, do:

cd client && mvn package -Dnocompile -Ddevmode (or simply gwt:run, but the first variant is tested in devel-it)
cd server && mvn jetty:run

Then point your browser at localhost port 8080.

The first command starts the codeserver at port 9876 with incremental compile support for fast frontend
development, and GWT's internal jetty/tomcat instance at port 8888
(which we won't use). The second command starts a fully updated jetty server instance with one webapp context
at port 8080 that gets automatically reloaded when you make changes to the server code base. That server contains
a GWT-RPC service implementation and a websocket chat service servlet.

UPDATE

Pointing the jetty:run server directly to the gwt dev mode-generated .gwt.rpc inside the client module
produces concurrency issues where something is locking the nocach.js file and thereby preventing the
gwt codeserver's compilations. I reverted back to the reverse proxy solution, but this time I found out
that it is possible to configure the RemoteServiceServlet to access a running code server directly.

TODO

* fix XSRF protection

REQUIREMENTS

* a somewhat recent Google Chrome browser to run the test units. Latest tested (win10+linux): v70. Chromedriver is being
retrieved and installed by WebDriverManager automatically.
